{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers import Dense, Input, GlobalMaxPooling1D, Dropout, LSTM, Embedding, Bidirectional\nfrom tensorflow.keras.models import Model\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom Bio import SeqIO\n\n# Read in protein sequences\nprotein_sequences = []\nfor record in SeqIO.parse(\"/kaggle/input/cafa-5-protein-function-prediction/Train/train_sequences.fasta\", \"fasta\"):\n    protein_sequences.append(str(record.seq))\n\n# Read in other files\ntrain_annotations = pd.read_csv(\"/kaggle/input/cafa-5-protein-function-prediction/Train/train_terms.tsv\", sep=\"\\t\", header=None, names=[\"EntryID\", \"term\", \"aspect\"])\ntrain_taxonomy = pd.read_csv(\"/kaggle/input/cafa-5-protein-function-prediction/Train/train_taxonomy.tsv\", sep=\"\\t\", header=None, names=[\"EntryID\", \"taxonomyID\"])\n\n# Merge the annotations and taxonomy files\ntrain_data = pd.merge(train_annotations, train_taxonomy, on=\"EntryID\")\n\n# Create dictionary mapping sequences to annotations\nseq_to_annotations = {}\nfor index, row in train_data.iterrows():\n    sequence = row[\"EntryID\"]\n    annotations = row[\"term\"].split(\"; \")\n    seq_to_annotations[sequence] = annotations\n\n# Create dictionary mapping annotations to indices\nall_annotations = set()\nfor annotations in seq_to_annotations.values():\n    all_annotations.update(annotations)\nlabel_to_index = {label: i for i, label in enumerate(sorted(all_annotations))}\n\n# Vectorize sequences and annotations\nvocab = {'A': 0, 'R': 1, 'N': 2, 'D': 3, 'C': 4, 'Q': 5, 'E': 6, 'G': 7, 'H': 8, 'I': 9, 'L': 10, 'K': 11, 'M': 12, 'F': 13, 'P': 14, 'S': 15, 'T': 16, 'W': 17, 'Y': 18, 'V': 19, 'B': 20, 'Z': 21, 'X': 22, 'J': 23, 'O': 24, 'U': 25}\nmaxlen = 1000\ntrain_sequences = np.zeros((len(protein_sequences), maxlen))\ntrain_labels = np.zeros((len(protein_sequences), len(label_to_index)))\nfor i, sequence in enumerate(protein_sequences):\n    for j, aa in enumerate(sequence):\n        if j == maxlen:\n            break\n        if aa in vocab:\n            train_sequences[i, j] = vocab[aa]\n    annotations = seq_to_annotations.get(sequence, [])\n    for annotation in annotations:\n        if annotation in label_to_index:\n            train_labels[i, label_to_index[annotation]] = 1\n\n# Split data into training and validation sets\ntrain_sequences, val_sequences, train_labels, val_labels = train_test_split(train_sequences, train_labels, test_size=0.2)\n\n# Define the model\ninputs = Input(shape=(maxlen,))\nx = Embedding(len(vocab), 50)(inputs)\nx = Bidirectional(LSTM(128, return_sequences=True))(x)\nx = GlobalMaxPooling1D()(x)\nx = Dense(64, activation='relu')(x)\nx = Dropout(0.5)(x)\noutputs = Dense(len(label_to_index), activation='sigmoid')(x)\n\nmodel = Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    loss='binary_crossentropy',\n    optimizer='adam',\n    metrics=['accuracy']\n)\n\nearly_stopping = EarlyStopping(\n    monitor='val_loss',\n    patience=3,\n    mode='min',\n    restore_best_weights=True\n)\n\n# Train the model\nhistory = model.fit(\n    train_sequences,\n    train_labels,\n    validation_data=(val_sequences, val_labels),\n    epochs=10,\n    batch_size=32,\n    callbacks=[early_stopping]\n)\n\n# Evaluate the model on the test set\ntest_sequences = []\nfor record in SeqIO.parse(\"/kaggle/input/cafa-5-protein-function-prediction/Test/test_sequences.fasta\", \"fasta\"):\n    test_sequences.append(str(record.seq))\n\ntest_sequences = [np.array([vocab[aa] for aa in seq if aa in vocab])[:maxlen] for seq in test_sequences]\ntest_sequences = pad_sequences(test_sequences, maxlen=maxlen, padding='post')\n\ny_pred = model.predict(test_sequences)\ny_pred = (y_pred > 0.5).astype(int)\n\n# Create submission file\ntest_entry_ids = []\nfor record in SeqIO.parse(\"/kaggle/input/cafa-5-protein-function-prediction/Test/test_sequences.fasta\", \"fasta\"):\n    test_entry_ids.append(record.id)\n\ntest_labels = []\nfor labels in label_to_index.keys():\n    test_labels.append(labels)\n\nsubmission = pd.DataFrame(y_pred, columns=test_labels)\nsubmission.insert(0, \"EntryID\", test_entry_ids)\nsubmission.to_csv(\"submission.csv\", index=False)\n","metadata":{"_uuid":"aa87420a-715d-46e7-8218-692d7db34319","_cell_guid":"b0f3ddbe-11d2-472d-b5c8-3a4a3744f9c3","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}